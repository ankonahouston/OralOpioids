Big_1 <- Big_1%>%
dplyr::arrange(Big_1$DIN)%>%
dplyr::group_by(Big_1$DIN)%>%
dplyr::mutate(ranks=order(.data$DIN))
Big_1 <- Big_1[,-3]
Big_2 <- reshape2::dcast (Big_1,DIN~ ranks, value.var= "MED_per_dispensing_unit")
Big_2$MED_per_dispensing_unit <- ifelse (Big_2$`1`=="Couldn't be calculated","Couldn't be calculated",Big_2$`1`)
Big_2$MED_per_dispensing_unit <- ifelse (is.na (Big_2$MED_per_dispensing_unit),Big_2$`1`,Big_2$MED_per_dispensing_unit)
Big_2 <- Big_2 [,c(1,4)]
Big_1 <- Big_2
#colnames (Opioids_2)
Complete <- merge (Big_1,Opioids_2,by= c("DIN"), all.y= T)
Complete_a <- subset (Complete, !is.na(Complete$MED_per_dispensing_unit))
#write.csv(Complete_a,"R:/Medical_Consultants_Counts/Opioids/Big_Opioids_New1.csv")
Incomplete <- subset (Complete, is.na(Complete$MED_per_dispensing_unit))
Complete1 <- subset (Complete, !is.na(Complete$MED_per_dispensing_unit))
#colnames (Complete1)
Complete1 <- Complete1 [,c(2,4:7,9,10,11)]
Complete2 <- unique(Complete1)
#colnames (Incomplete)
Incomplete1 <- Incomplete[,c(1,3,4:7,9,10,11)]
Incomplete1 <- merge (Incomplete1, Complete2, by= c("Base1","Base2","Base3","Opioid","Route","Form_1"), all.x= T)
Incomplete_Done <- subset (Incomplete1,!is.na(Incomplete1$MED_per_dispensing_unit))
Incomplete2 <- subset (Incomplete1,is.na(Incomplete1$MED_per_dispensing_unit))
Incomplete2$Base1 <- ifelse ((is.na(Incomplete2$Base1)),1,Incomplete2$Base1)
#colnames (Incomplete2)
Incomplete3 <- Incomplete2 [ ,c(1:7)]
Incomplete3 <- unique(Incomplete3)
Incomplete3$Opioid_1 <- stringr::word(Incomplete3$Opioid,1)
Incomplete3$Opioid_2 <- stringr::word(Incomplete3$Opioid,2)
Incomplete3$MED_per_dispensing_unit <- 0
#str(Incomplete3)
Incomplete3$Opioid_2 <- suppressWarnings(as.numeric(Incomplete3$Opioid_2))
Incomplete3$MED_per_dispensing_unit<- ifelse (Incomplete3$Opioid_1 %in% c("BUPRENORPHINE","NALOXONE"),
"Couldn't be calculated",Incomplete3$MED_per_dispensing_unit)
#str(Incomplete3)
Incomplete3$Base1 <- suppressWarnings(as.numeric(Incomplete3$Base1))
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route %in% c("BUCCAL","SUBLINGUAL") & Incomplete3$Opioid_1=="FENTANYL"),
((Incomplete3$Opioid_2*0.13)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "ORAL" & Incomplete3$Opioid_1=="CODEINE"),
((Incomplete3$Opioid_2*0.15)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "ORAL" & Incomplete3$Opioid_1=="HYDROCODONE"),
((Incomplete3$Opioid_2*1.5)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "ORAL" & Incomplete3$Opioid_1=="OXYCODONE"),
((Incomplete3$Opioid_2*1.5)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "ORAL" & Incomplete3$Opioid_1=="HYDROMORPHONE"),
((Incomplete3$Opioid_2*5)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "RECTAL" & Incomplete3$Opioid_1=="MORPHINE"),
((Incomplete3$Opioid_2*3)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "ORAL" & Incomplete3$Opioid_1=="MORPHINE"),
((Incomplete3$Opioid_2*1)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse ((Incomplete3$Route== "ORAL" & Incomplete3$Opioid_1=="OXYMORPHONE"),
((Incomplete3$Opioid_2*3)/Incomplete3$Base1),Incomplete3$MED_per_dispensing_unit)
#str(Incomplete3)
Incomplete3$MED_per_dispensing_unit <- suppressWarnings(as.numeric(Incomplete3$MED_per_dispensing_unit))
Incomplete3$MED_per_dispensing_unit <- round (Incomplete3$MED_per_dispensing_unit,1)
Incomplete3$MED_per_dispensing_unit <- as.character(Incomplete3$MED_per_dispensing_unit)
Incomplete3$MED_per_dispensing_unit <- ifelse (Incomplete3$MED_per_dispensing_unit== "0","Couldn't be calculated",Incomplete3$MED_per_dispensing_unit)
#colnames (Incomplete2)
Incomplete2 <- Incomplete2 [,c(1:10)]
names (Incomplete2)[9] <- "Opioid_1"
Incomplete2 <- Incomplete2[,c(-10)]
Incomplete_Done <- Incomplete_Done[ ,c(1:8,10)]
Incomplete4 <- merge (Incomplete2, Incomplete3,by= c("Base1","Base2","Base3","Opioid","Route","Form_1","DIN"), all.x= T)
Incomplete4 <- unique (Incomplete4)
#colnames (Incomplete4)
Incomplete4 <- Incomplete4 [ ,c(1:8,12)]
names(Incomplete4)[7] <- "DIN"
#colnames (Incomplete_Done)
#colnames(Incomplete4)
Total_Incomplete <- rbind (Incomplete4, Incomplete_Done)
Total_Incomplete$Base1 <- ifelse ((is.na(Total_Incomplete$Base1)),1,Total_Incomplete$Base1)
Total_Incomplete$MED_per_dispensing_unit <- ifelse (Total_Incomplete$Opioid=="OXYCODONE 5 MG" & Total_Incomplete$Form_1=="CAPTAB" ,7.5,Total_Incomplete$MED_per_dispensing_unit )
Total_Incomplete$MED_per_dispensing_unit <- ifelse (Total_Incomplete$Opioid=="OXYCODONE 10 MG" & Total_Incomplete$Form_1=="CAPTAB" ,15,Total_Incomplete$MED_per_dispensing_unit )
Total_Incomplete$MED_per_dispensing_unit <- ifelse (Total_Incomplete$Opioid=="OXYCODONE 20 MG" & Total_Incomplete$Form_1=="CAPTAB" ,30,Total_Incomplete$MED_per_dispensing_unit )
Total_Incomplete$MED_per_dispensing_unit <- ifelse (Total_Incomplete$Opioid=="OXYCODONE 40 MG" & Total_Incomplete$Form_1=="CAPTAB" ,60,Total_Incomplete$MED_per_dispensing_unit )
Total_Incomplete$MED_per_dispensing_unit <- suppressWarnings(as.numeric (Total_Incomplete$MED_per_dispensing_unit))
Total_Incomplete$MED_50_day <- 50/(Total_Incomplete$MED_per_dispensing_unit)
Total_Incomplete$MED_50_day <- round(Total_Incomplete$MED_50_day, digits=0)
Total_Incomplete$MED_90_day <- 90/(Total_Incomplete$MED_per_dispensing_unit)
Total_Incomplete$MED_90_day <- round(Total_Incomplete$MED_90_day, digits=0)
Total_Incomplete$Threshold_7days <- 7*Total_Incomplete$MED_50_day
Total_Incomplete$Threshold_14days <- 14*Total_Incomplete$MED_50_day
Total_Incomplete$Threshold_30days <- 30*Total_Incomplete$MED_50_day
#colnames (Total_Incomplete)
names (Total_Incomplete) [10] <- "No_tabs/ml assuming 50 MED limit per day"
names (Total_Incomplete) [11] <- "No_tabs/ml assuming 90 MED limit per day"
names (Total_Incomplete) [12] <- "Maximum No_tabs/ml assuming 50 MED limit for 7 days"
names (Total_Incomplete) [13] <- "Maximum No_tabs/ml assuming 50 MED limit for 14 days"
names (Total_Incomplete) [14] <- "Maximum No_tabs/ml assuming 50 MED limit for 30 days"
drug$DIN <- suppressWarnings(as.numeric(drug$DIN))
status <- merge (status, drug, by= "ID")
#colnames(status)
status1 <- as.data.frame(cbind(status$ID,status$Status_1,status$Status_2,status$Status_3,status$DIN))
status1 <- as.data.frame(status1)
colnames(status1) <- c("ID","Status_1","Status_2","Status_3","DIN")
#colnames(status1)
Total_Incomplete <- merge (Total_Incomplete,status1, by= "DIN")
Complete_a <- merge (Complete_a,status1, by= "DIN")
Complete_a <- unique (Complete_a)
#colnames (Complete_a)
#colnames (Total_Incomplete)
Complete_a$MED_per_dispensing_unit <- suppressWarnings(as.numeric(Complete_a$MED_per_dispensing_unit))
Complete_a$MED_50_day <- 50/(Complete_a$MED_per_dispensing_unit)
Complete_a$MED_50_day <- round(Complete_a$MED_50_day, digits=0)
Complete_a$MED_90_day <- 90/(Complete_a$MED_per_dispensing_unit)
Complete_a$MED_90_day <- round(Complete_a$MED_90_day, digits=0)
Complete_a$Threshold_7days <- 7*Complete_a$MED_50_day
Complete_a$Threshold_14days <- 14*Complete_a$MED_50_day
Complete_a$Threshold_30days <- 30*Complete_a$MED_50_day
#colnames (Complete_a)
names (Complete_a) [16] <- "No_tabs/ml assuming 50 MED limit per day"
names (Complete_a) [17] <- "No_tabs/ml assuming 90 MED limit per day"
names (Complete_a) [18] <- "Maximum No_tabs/ml assuming 50 MED limit for 7 days"
names (Complete_a) [19] <- "Maximum No_tabs/ml assuming 50 MED limit for 14 days"
names (Complete_a) [20] <- "Maximum No_tabs/ml assuming 50 MED limit for 30 days"
Complete_a <- Complete_a[,c(1:6,9:20)]
Big_Data <- rbind (Total_Incomplete,Complete_a)
Big_Data <- unique(Big_Data)
Big_Data <- Big_Data%>%
dplyr::arrange(Big_Data$DIN)%>%
dplyr::group_by(Big_Data$DIN)%>%
dplyr::mutate(ranks=order(.data$DIN))
Big_Data <- Big_Data[,-19]
Previous_DIN <- as.data.frame(Big_1[,2])
Previous_DIN <- unique(Previous_DIN)
colnames(Previous_DIN) <- "DIN"
Previous_DIN$Month <- "Previous"
Big_Data_DIN <- Big_Data[,1]
Big_Data_DIN <- unique(Big_Data_DIN)
Big_Data_DIN$Month <- "Recent"
a <- merge (Big_Data_DIN, Previous_DIN,by= "DIN", all.x= T, all.y= T)
#Big_Data <- Big_Data[,c(1:11)]
DIN_count <- Big_Data %>%
dplyr::group_by(.data$DIN,.data$MED_per_dispensing_unit) %>%
dplyr::tally()
Big_Data <- merge(Big_Data, DIN_count, by= c("DIN","MED_per_dispensing_unit"))
#Big_Data <- Big_Data[,c(1:3,7,8,11,14:18)]
Big_Data1 <- as.data.frame(cbind(Big_Data$DIN, as.character(Big_Data$Opioid))) #I want to keep just the DIN and name of the Opioid
Big_Data1 <- unique(Big_Data1)
colnames(Big_Data1) <- c("DIN","Opioid")
Big_Data1 <- as.data.frame(Big_Data1)
Big_Data1 <- Big_Data1 %>%
dplyr::group_by(.data$DIN)%>%
dplyr::mutate(rank=order(.data$DIN))
Big_Data2 <- reshape2::dcast(Big_Data1, DIN ~ rank, value.var="Opioid")
colnames(Big_Data2) <- c("DIN","Opioid1","Opioid2")
Big_Data2$Opioid <- ifelse(is.na(Big_Data2$Opioid2),paste(Big_Data2$Opioid1),
paste (Big_Data2$Opioid1, "/",Big_Data2$Opioid2))
Big_Data1 <- as.data.frame(cbind(Big_Data$DIN, as.character(Big_Data$Route))) #I want to keep just the DIN and route
Big_Data1 <- unique(Big_Data1)
colnames(Big_Data1) <- c("DIN","Route")
Big_Data1 <- Big_Data1 %>%
dplyr::arrange (.data$DIN,Big_Data1$Route)%>%
dplyr::group_by(.data$DIN)%>%
dplyr::mutate(rank=order(.data$DIN))
Big_Data3 <- reshape2::dcast(Big_Data1, DIN ~ rank, value.var="Route")
colnames(Big_Data3) <- c("DIN","Route1","Route2")
Big_Data3$Route <- ifelse(is.na(Big_Data3$Route2),paste(Big_Data3$Route1),
paste (Big_Data3$Route1, "/",Big_Data3$Route2))
Big_Data2 <- Big_Data2[,c(1,ncol(Big_Data2))]
Big_Data3 <- Big_Data3[,c(1,ncol(Big_Data3))]
Big_Data <- merge(Big_Data, Big_Data2, by= "DIN")
Big_Data <- merge(Big_Data, Big_Data3, by= "DIN")
Big_Data$MED_per_dispensing_unit <- ifelse (is.na(Big_Data$MED_per_dispensing_unit),"Couldn't be calculated",Big_Data$MED_per_dispensing_unit)
Big_Data$`No_tabs/ml assuming 50 MED limit per day` <- ifelse (is.na(Big_Data$`No_tabs/ml assuming 50 MED limit per day`),"Couldn't be calculated",Big_Data$`No_tabs/ml assuming 50 MED limit per day`)
Big_Data$`No_tabs/ml assuming 90 MED limit per day` <- ifelse (is.na(Big_Data$`No_tabs/ml assuming 90 MED limit per day`),"Couldn't be calculated",Big_Data$`No_tabs/ml assuming 90 MED limit per day`)
Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 7 days` <- ifelse (is.na(Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 7 days`),"Couldn't be calculated",Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 7 days`)
Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 14 days` <- ifelse (is.na(Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 14 days`),"Couldn't be calculated",Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 14 days`)
Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 30 days` <- ifelse (is.na(Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 30 days`),"Couldn't be calculated",Big_Data$`Maximum No_tabs/ml assuming 50 MED limit for 30 days`)
Previous_Data <- colnames(Big_1)
Big_Data <- Big_Data[,c(1:18)]
Big_Data <- plyr::rename(Big_Data, c("Opioid.x" = "Opioid"))
Big_Data <- plyr::rename(Big_Data, c("Route.x" = "Route"))
Big_Data <- unique(Big_Data)
HealthCanada_Opioid_Table <- merge(Big_Data,form,by= "ID")
unlink(paste0(filelocation,"/txtfiles"),recursive = TRUE)
unlink(paste0(filelocation,"/allfiles"),recursive = TRUE)
# FILES <- list.files(filelocation)
# files_to_be_deleted <- FILES[grepl("txt$",unlist(FILES))]
# suppressWarnings(file.remove(paste0(filelocation,"/",files_to_be_deleted)))
out_msg <- paste0("The HealthCanada_Opioid_Table was successfully updated to ",
second_table_date,".")
HealthCanada_Opioid_Table <- cbind(HealthCanada_Opioid_Table[,c(2:8,19,10:16)],last_updated = second_table_date)
## Write the new table
HealthCanada_Opioid_Table_path <- paste0(filelocation,"/",second_table_date,"_HealthCanada_Opioid_Table.xlsx")
openxlsx::write.xlsx(HealthCanada_Opioid_Table,HealthCanada_Opioid_Table_path)
HealthCanada_Opioid_Table$DIN <- readr::parse_number(HealthCanada_Opioid_Table$DIN)
out <- as.data.frame(HealthCanada_Opioid_Table)
disclaimer <-  paste0("Not a substitute for medical advise. ",
"Please note that the output generated by ",
"the package should not be substituted for clinical ",
"advise and any medication should be only consumed at ",
"the advise of a licensed healthcare provider.")
source_url_data <- "https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/drug-product-database/what-data-extract-drug-product-database.html"
source_url_dosing <-  "https://www.cihi.ca/sites/default/files/document/opioid-prescribing-canada-trends-en-web.pdf"
comment(out) <- c(msg = out_msg,path=HealthCanada_Opioid_Table_path,disclaimer= disclaimer,
source_url_data=source_url_data,source_url_dosing=source_url_dosing)
## if verbose is set to TRUE the message will be printed (cat) in the console
if (verbose) cat(utils::tail(out_msg,1),
paste0("DISCLAIMER: ",disclaimer),
"",
paste0("Source url of the data: ",source_url_data),
paste0("Source url used for dosing: ",source_url_dosing), sep="\n")
}
}
return(out)
}
#'Get the Morphine Equivalent Dose (MED) from Health Canada by using the DIN
#'
#'\code{MED} retrieves the Morphine Equivalent Dose from the HealthCanada_Opioid_Table.
#'
#'@param Drug_ID A numeric value for the DIN. Exclude all zeros in front
#'@param HealthCanada_Opioid_Table Health Canada opioid dataset which can be loaded by using
#'the \code{load_HealthCanada_Opioid_Table()} function. Please run \code{load_HealthCanada_Opioid_Table()} function. The name you use to call the function should be input here.
#'
#' @return MED: Morphine Equivalent Dose
#' @rawNamespace import(dplyr, except = rename)
#' @examples
#'
#' HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table(no_download = TRUE)
#' MED(786535, HealthCanada_Opioid_Table)
#' @export
MED <- function(Drug_ID,HealthCanada_Opioid_Table){
if (Drug_ID %in% HealthCanada_Opioid_Table$DIN){
a <- subset(HealthCanada_Opioid_Table,HealthCanada_Opioid_Table$DIN == Drug_ID)
out_MED_per_dispensing_unit <- suppressWarnings(as.numeric(a$MED_per_dispensing_unit))
if (is.na(out_MED_per_dispensing_unit[1])){
out_MED_per_dispensing_unit <- a$MED_per_dispensing_unit
}
return(out_MED_per_dispensing_unit)
}
else return("The DIN could not be found in the HealthCanada_Opioid_Table.")
}
#'Get the Opioid content from Health Canada by using the DIN
#'
#'\code{Opioid} retrieves the Opioid content from the HealthCanada_Opioid_Table.
#'
#'@param Drug_ID A numeric value for the DIN. Exclude all zeros in front
#'@param HealthCanada_Opioid_Table Health Canada opioid dataset which can be loaded by using
#'the \code{load_HealthCanada_Opioid_Table()} function. Please run \code{load_HealthCanada_Opioid_Table()} function. The name you use to call the function should be input here.
#'
#' @return Opioid content
#' @rawNamespace import(dplyr, except = rename)
#' @examples
#'
#' HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table(no_download = TRUE)
#' Opioid(786535, HealthCanada_Opioid_Table)
#'
#' @export
Opioid <- function(Drug_ID,HealthCanada_Opioid_Table){
if (Drug_ID %in% HealthCanada_Opioid_Table$DIN)
{a <- subset(HealthCanada_Opioid_Table,HealthCanada_Opioid_Table$DIN== Drug_ID)
return(a$Opioid)}
else return("The DIN could not be found in the HealthCanada_Opioid_Table.")
}
#'Get the Brand name from Health Canada by using the DIN
#'
#'\code{Brand} retrieves the Brand name for an Oral Opioid from the HealthCanada_Opioid_Table.
#'
#'@param Drug_ID A numeric value for the DIN. Exclude all zeros in front
#'@param HealthCanada_Opioid_Table Health Canada opioid dataset which can be loaded by using
#'the \code{load_HealthCanada_Opioid_Table()} function. Please run \code{load_HealthCanada_Opioid_Table()} function. The name you use to call the function should be input here.
#'
#' @return Brand name
#' @rawNamespace import(dplyr, except = rename)
#' @examples
#'
#' HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table(no_download = TRUE)
#' Brand(786535, HealthCanada_Opioid_Table)
#'
#' @export
Brand <- function(Drug_ID,HealthCanada_Opioid_Table){
if (Drug_ID %in% HealthCanada_Opioid_Table$DIN)
{a <- subset(HealthCanada_Opioid_Table,HealthCanada_Opioid_Table$DIN== Drug_ID)
return(a$Brand)}
else return("The DIN could not be found in the HealthCanada_Opioid_Table.")
}
#'Maximum number of units/millilitres of oral opioids allowed per day assuming a daily limit of 50 MED/day for a DIN from the HealthCanada Opioid Table by using the DIN
#'
#'\code{MED_50} gives us the maximum nuber of units (e.g. tablets or capsules for solid oral opioids and no. of millilitres for liquid oral opioids that are safe assuming a Morphine equivalent Dose of 50.)
#'
#'@param Drug_ID A numeric value for the DIN. Exclude all zeros in front
#'@param HealthCanada_Opioid_Table Health Canada opioid dataset which can be loaded by using
#'the \code{load_HealthCanada_Opioid_Table()} function. Please run \code{load_HealthCanada_Opioid_Table()} function. The name you use to call the function should be input here.
#'
#' @return no. of units to reach 50 MED
#' @rawNamespace import(dplyr, except = rename)
#' @examples
#'
#' HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table(no_download = TRUE)
#' MED_50(786535, HealthCanada_Opioid_Table)
#'
#' @export
MED_50 <- function(Drug_ID,HealthCanada_Opioid_Table){
if (Drug_ID %in% HealthCanada_Opioid_Table$DIN){
a <- subset(HealthCanada_Opioid_Table,HealthCanada_Opioid_Table$DIN== Drug_ID)
out_MED50_per_dispensing_unit <- suppressWarnings(as.numeric(a$`No_tabs/ml.assuming.50.MED.limit.per.day`))
if (is.na(out_MED50_per_dispensing_unit[1])){
out_MED50_per_dispensing_unit <- a$`No_tabs/ml.assuming.50.MED.limit.per.day`
}
return(out_MED50_per_dispensing_unit)
} else return("The DIN could not be found in the HealthCanada_Opioid_Table.")
}
#'Maximum number of units/millilitres of oral opioids allowed per day assuming a daily limit of 90 MED/day for a DIN from the HealthCanada Opioid Table by using the DIN
#'
#'\code{MED_90} gives us the maximum number of units (e.g. tablets or capsules for solid oral opioids and no. of millilitres for liquid oral opioids that are safe assuming a Morphine equivalent Dose of 90.)
#'
#'@param Drug_ID A numeric value for the DIN. Exclude all zeros in front
#'@param HealthCanada_Opioid_Table Health Canada opioid dataset which can be loaded by using
#'the \code{load_HealthCanada_Opioid_Table()} function. Please run \code{load_HealthCanada_Opioid_Table()} function. The name you use to call the function should be input here.
#'
#' @return no. of units to reach 90 MED
#' @rawNamespace import(dplyr, except = rename)
#' @examples
#'
#' HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table(no_download = TRUE)
#' MED_90(786535, HealthCanada_Opioid_Table)
#' @export
MED_90 <- function(Drug_ID,HealthCanada_Opioid_Table){
if (Drug_ID %in% HealthCanada_Opioid_Table$DIN){
a <- subset(HealthCanada_Opioid_Table,HealthCanada_Opioid_Table$DIN== Drug_ID)
out_MED90_per_dispensing_unit <- suppressWarnings(as.numeric(a$`No_tabs/ml.assuming.90.MED.limit.per.day`))
if (is.na(out_MED90_per_dispensing_unit[1])){
out_MED90_per_dispensing_unit <- a$`No_tabs/ml.assuming.90.MED.limit.per.day`
}
return(out_MED90_per_dispensing_unit)
} else return("The DIN could not be found in the HealthCanada_Opioid_Table.")
}
load_HealthCanada_Opioid_Table()
downloaded_files <- list.files(filelocation)
HealthCanada_Opioid_Table_file_indices <- grep("HealthCanada_Opioid_Table",downloaded_files)
downloaded_files
a <- load_HealthCanada_Opioid_Table()
```R
```R
MED_90(786535, HealthCanada_Opioid_Table)
a <- load_HealthCanada_Opioid_Table()
MED_90(786535, a)
MED_50(786535, a)
HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table(no_download = TRUE)
HealthCanada_Opioid_Table <- load_HealthCanada_Opioid_Table()
MED_50(786535, HealthCanada_Opioid_Table)
Brand(786535, HealthCanada_Opioid_Table)
Opioid(786535, HealthCanada_Opioid_Table)
MED(786535, HealthCanada_Opioid_Table)
MED_50(786535, HealthCanada_Opioid_Table)
View(HealthCanada_Opioid_Table)
library(OralOpioids)
devtools::load_all(".")
library(OralOpioids)
library(OralOpioids)
load_HealthCanada_Opioid_Table()
b <- load_HealthCanada_Opioid_Table()
Brand(786535,b)
MED_90(786535,b)
library(OralOpioids)
load_HealthCanada_Opioid_Table()
a <- load_HealthCanada_Opioid_Table()
tempdir()
list(tempdir())
list(tempfile())
.libPaths()
load_HealthCanada_Opioid_Table()
a <- load_HealthCanada_Opioid_Table()
Opioid(786535, HealthCanada_Opioid_Table)
Opioid(786535, a)
library(readxl)
options(scipen = 100, digits = 4)
Constipation <- read_excel("Z:/Banerjee/Methotrexate Induced Mucositis/MTX_Clear_Constipation_1Feb2023.xlsx")
Constipation1 <- subset (Constipation, mtx_course==1 & administered_dose!=5000)
Constipation <- Constipation[,c(1,4:7,8,9,48:50,55:56,60,61:74)]
#str(Constipation)
Doses <- unique(Constipation$administered_dose)
print(Doses)
dose_min <- aggregate (Constipation$administered_dose, list(Constipation$id), min)
colnames(dose_min) <- c("id","min_administered_dose")
Constipation <- merge(Constipation,dose_min,by= "id")
Constipation$dose_reduction <- ifelse(Constipation$min_administered_dose==5000,0,1)
Constipation$cr_foldchange <- as.factor(Constipation$cr_foldchange)
table(Constipation$mtx_delay,Constipation$cr_foldchange)
Constipation$consti_y <- ifelse(Constipation$laxative_proxy==1|Constipation$documentation_of_constipatation==1,1,0)
library (readr)
Constipation$id <- parse_number(Constipation$id)
Constipation$cr_foldchange[is.na(Constipation$cr_foldchange)] <- 0
Constipation$consti_y[is.na(Constipation$consti_y)] <- 0
library (dplyr)
library(forcats)
Constipation <- Constipation %>%
mutate(cr_fold1= fct_recode(cr_foldchange,
"0"="0",
"1"="1",
"2"="2",
"2"="3"))
Constipation <- Constipation %>%
mutate (race1= dplyr::case_when(
race==3 & ethnicity %in% c(2,3) ~ "Black",
race==6 & ethnicity %in% c(2,3) ~ "A-White",
ethnicity==1 ~ "Latino",
NA ~ "Other"
))
Constipation$race1 <- ifelse(is.na(Constipation$race1),"Others",Constipation$race1)
library(gee)
library (geeasy)
dep_gee <- gee(factor(mtx_delay) ~ factor(sex)+dose_reduction+factor(cr_fold1)+documentation_of_constipatation+race1+age,
data = Constipation,
id = id,
family = binomial(link = "logit"),
corstr = "exchangeable")
summary(dep_gee)
class(dep_gee)
exp(cbind(OR = coef(dep_gee)))
library(geepack)
mf <- formula(mtx_delay ~bisaco_tab+lactulose+miralax+senna+docusate +factor(sex)+dose_reduction+factor(cr_fold1)+race1+age)
Constipation1 <- Constipation[,c(1,12,14:19,3,29,31,32,10)]
Constipation1 <- na.omit(Constipation1)
geeEx <- geepack::geeglm(mf, data = Constipation1,
id = id,
family = binomial,
corstr = "exchangeable")
summary (geeEx)
broom::tidy(x = geeEx, conf.int = TRUE)
exp(cbind(OR = coef(geeEx)))
library(lme4)
m <- glmer(mtx_delay ~ documentation_of_constipatation+age+miralax+sex+dose_reduction+cr_fold1+race1+(1|id), data = Constipation, family = binomial,nAGQ = 0)
summary(m, corr = T)
library(gee)
dep_gee <- gee(factor(mtx_delay) ~ bisaco_tab+lactulose+miralax+senna+docusate+factor(sex)+dose_reduction+factor(cr_fold1)+race1+age,
data = Constipation,
id = id,
family = binomial,
corstr = "exchangeable")
exp(cbind(OR = coef(dep_gee)))
library(lme4)
m <- glmer(mtx_delay ~bisaco_tab+lactulose+miralax+senna+docusate +factor(sex)+dose_reduction+factor(cr_fold1)+race1+age+(1|id), data = Constipation, family = binomial,nAGQ = 0)
summary(m, correlation = T)
colnames(Constipation)
library(gee)
dep_gee <- geepack::geeglm(mtx_delay ~ bisaco_tab+lactulose+miralax+senna+docusate+factor(sex)+dose_reduction+factor(cr_fold1)+race1+age,
data = Constipation1,
id = id,
family = binomial,
corstr = "exchangeable")
exp(cbind(OR = coef(dep_gee)))
broom::tidy(x = geeEx, conf.int = TRUE)
exp(cbind(OR = coef(geeEx)))
a <- plotEst(geeEx)
library (ggplot2)
a+ggtitle("Estimates for Delayed Methotrexate clearance")
Constipation$mtx_hour <- Constipation$mtx_clear_hr-48
if(!require("remotes")) install.packages("remotes") # from CRAN
install.packages("R.rsp")# from CRAN; to build NBZIMM vignettes
library (NBZIMM)
Constipation$mtx_hour <- ifelse(Constipation$mtx_hour<0,0,Constipation$mtx_hour)
B<-glmm.zinb(mtx_hour ~ bisaco_tab+lactulose+miralax+senna+docusate +factor(sex)+dose_reduction+factor(cr_fold1)+race1+age,
data = Constipation,
random = ~1|id,
zi_fixed= ~1,
correlation = corAR1())
summary (B)
Demographics <- Constipation[,c(1:5)]
Demographics <- unique(Demographics)
Demographics %>%
group_by(sex)%>%
tally()
View(Demographics)
Demographics %>%
group_by(race1)%>%
tally()
Constipation %>%
group_by(race1)%>%
tally()
Demographics <- Demographics %>%
mutate (race1= dplyr::case_when(
race==3 & ethnicity %in% c(2,3) ~ "Black",
race==6 & ethnicity %in% c(2,3) ~ "A-White",
ethnicity==1 ~ "Latino",
NA ~ "Other"
))
Demographics %>%
group_by(race1)%>%
tally()
View(Constipation1)
Demographics %>%
group_by(crfold1)%>%
tally()
Constipation1 %>%
group_by(crfold1)%>%
tally()
Constipation1 %>%
group_by(cr_fold1)%>%
tally()
Constipation2 <- unique(Constipation1[,c(1,13)])
View(Constipation2)
Constipation2 <- unique(Constipation1[,c(1,11)])
Constipation2 %>%
group_by(cr_fold1)%>%
tally()
Age <- Constipation1[,c(1,13)]
aggregate(Constipation1$age,list(Constipation1$id),min)
Age <- aggregate(Constipation1$age,list(Constipation1$id),min)
colnames(Age) <- c("id","min_age")
mean(Age$min_age)
median(Age$min_age)
library(readxl)
options(scipen = 100, digits = 4)
Constipation <- read_excel("Z:/Banerjee/Methotrexate Induced Mucositis/MTX_Clear_Constipation_1Feb2023.xlsx")
Constipation1 <- subset (Constipation, mtx_course==1 & administered_dose!=5000)
library(readxl)
options(scipen = 100, digits = 4)
Constipation <- read_excel("Z:/Banerjee/Methotrexate Induced Mucositis/MTX_Clear_Constipation_1Feb2023.xlsx")
library(readxl, repos = 'http://cran.us.r-project.org')
